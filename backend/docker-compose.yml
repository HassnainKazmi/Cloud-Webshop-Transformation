version: "3.8"

services:
  mysql-db:
    image: mysql:8
    container_name: mysql-db
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
    ports:
      - "3306:3306"
    networks:
      - app-network
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    profiles: ["prod"]

  webshop-backend:
    image: webshop.azurecr.io/webshop-backend:4.0
    container_name: webshop-backend
    env_file:
      - .env
    environment:
      - APP_ENV=production
    ports:
      - "80:80"
    networks:
      - app-network
    restart: always
    depends_on:
      mysql-db:
        condition: service_healthy
    profiles: ["prod"]
    entrypoint: ["./entrypoint.sh"]

  database:
    image: mysql:8
    env_file:
      - .env.dev
    container_name: mysql-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      # MODE: development
    networks:
      - dev-net
    ports:
      - 3308:3306
    profiles: ["dev"]
    healthcheck:
      test: mysqladmin ping -h localhost -u root --password=$$MYSQL_ROOT_PASSWORD
      interval: 10s
      timeout: 5s
      retries: 5

  webshop-api:
    build:
      context: .
      dockerfile: Dockerfile
    image: flask-backend
    container_name: flask-backend-container
    env_file:
      - .env.dev
    environment:
      - APP_ENV=development
    depends_on:
      database:
        condition: service_healthy
    ports:
      - 5000:5000
    restart: always
    networks:
      - dev-net
    profiles: ["dev"]
    entrypoint: ["./entrypoint.sh"]

networks:
  app-network:
  dev-net:

volumes:
  mysql-data:
    driver: local
